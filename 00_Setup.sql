-- Snowflake Setup Script for Online Retail Competition
-- Creates database, schemas, tables, relationships, and inserts sample data
-- Run with a role that can create databases, warehouses, and objects

-- 1) Core objects
CREATE OR REPLACE DATABASE RETAIL_COMPETITION;
USE DATABASE RETAIL_COMPETITION;

-- Optional: dedicated warehouse for the competition
CREATE OR REPLACE WAREHOUSE WH_RETAIL_COMPETITION
  WITH WAREHOUSE_SIZE = 'XSMALL'
  AUTO_SUSPEND = 60
  AUTO_RESUME = TRUE
  INITIALLY_SUSPENDED = TRUE
  COMMENT = 'Warehouse for retail competition tasks';

-- Schemas for raw, curated, and marts/presentation
CREATE OR REPLACE SCHEMA RAW;     -- landing/source-conformed layer
CREATE OR REPLACE SCHEMA CURATED; -- cleaned, modeled, conformed layer (star/3NF)
CREATE OR REPLACE SCHEMA MART;    -- presentation/analytics layer for dashboards

USE SCHEMA RAW;

-- 2) Tables (RAW)
-- Note: Snowflake supports declarative constraints for documentation; they are not enforced by default

CREATE OR REPLACE TABLE CUSTOMERS (
  CUSTOMER_ID           NUMBER IDENTITY START 1 INCREMENT 1,
  CUSTOMER_EXTERNAL_KEY STRING,
  FIRST_NAME            STRING,
  LAST_NAME             STRING,
  EMAIL                 STRING,
  PHONE                 STRING,
  GENDER                STRING,
  BIRTH_DATE            DATE,
  ADDRESS_LINE1         STRING,
  ADDRESS_LINE2         STRING,
  CITY                  STRING,
  STATE                 STRING,
  POSTAL_CODE           STRING,
  COUNTRY               STRING,
  SEGMENT               STRING,  -- e.g., Enterprise, SMB, Consumer
  CREATED_AT            TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT            TIMESTAMP_NTZ,
  CONSTRAINT PK_CUSTOMERS PRIMARY KEY (CUSTOMER_ID)
);

CREATE OR REPLACE TABLE PRODUCTS (
  PRODUCT_ID            NUMBER IDENTITY START 1 INCREMENT 1,
  SKU                   STRING,
  PRODUCT_NAME          STRING,
  CATEGORY              STRING,  -- e.g., Electronics, Apparel, Home
  SUBCATEGORY           STRING,
  BRAND                 STRING,
  UNIT_PRICE            NUMBER(10,2),
  COST_PRICE            NUMBER(10,2),
  ACTIVE_FLAG           BOOLEAN,
  CREATED_AT            TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT            TIMESTAMP_NTZ,
  CONSTRAINT PK_PRODUCTS PRIMARY KEY (PRODUCT_ID)
);

CREATE OR REPLACE TABLE SUPPLIERS (
  SUPPLIER_ID           NUMBER IDENTITY START 1 INCREMENT 1,
  SUPPLIER_NAME         STRING,
  CONTACT_NAME          STRING,
  CONTACT_EMAIL         STRING,
  CONTACT_PHONE         STRING,
  COUNTRY               STRING,
  RATING                NUMBER(3,2),
  CREATED_AT            TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT            TIMESTAMP_NTZ,
  CONSTRAINT PK_SUPPLIERS PRIMARY KEY (SUPPLIER_ID)
);

CREATE OR REPLACE TABLE EMPLOYEES (
  EMPLOYEE_ID           NUMBER IDENTITY START 1 INCREMENT 1,
  FIRST_NAME            STRING,
  LAST_NAME             STRING,
  EMAIL                 STRING,
  TITLE                 STRING,
  DEPARTMENT            STRING,
  HIRE_DATE             DATE,
  MANAGER_ID            NUMBER,
  STATUS                STRING, -- Active/Terminated/Leave
  CREATED_AT            TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT            TIMESTAMP_NTZ,
  CONSTRAINT PK_EMPLOYEES PRIMARY KEY (EMPLOYEE_ID)
);

CREATE OR REPLACE TABLE ORDERS (
  ORDER_ID              NUMBER IDENTITY START 1 INCREMENT 1,
  ORDER_EXTERNAL_KEY    STRING,
  CUSTOMER_ID           NUMBER,
  ORDER_DATE            TIMESTAMP_NTZ,
  ORDER_STATUS          STRING, -- Created, Paid, Shipped, Delivered, Cancelled, Returned
  CHANNEL               STRING, -- Web, Mobile, Support
  PAYMENT_METHOD        STRING, -- Card, PayPal, COD
  SHIPPING_ADDRESS      STRING,
  SHIPPING_CITY         STRING,
  SHIPPING_STATE        STRING,
  SHIPPING_POSTAL_CODE  STRING,
  SHIPPING_COUNTRY      STRING,
  EMPLOYEE_ID           NUMBER,
  CREATED_AT            TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT            TIMESTAMP_NTZ,
  CONSTRAINT PK_ORDERS PRIMARY KEY (ORDER_ID),
  CONSTRAINT FK_ORDERS_CUSTOMER FOREIGN KEY (CUSTOMER_ID) REFERENCES CUSTOMERS(CUSTOMER_ID),
  CONSTRAINT FK_ORDERS_EMPLOYEE FOREIGN KEY (EMPLOYEE_ID) REFERENCES EMPLOYEES(EMPLOYEE_ID)
) CLUSTER BY (ORDER_DATE, CUSTOMER_ID);

CREATE OR REPLACE TABLE ORDER_ITEMS (
  ORDER_ITEM_ID         NUMBER IDENTITY START 1 INCREMENT 1,
  ORDER_ID              NUMBER,
  PRODUCT_ID            NUMBER,
  QUANTITY              NUMBER(10,0),
  UNIT_PRICE_AT_ORDER   NUMBER(10,2),
  DISCOUNT_AMOUNT       NUMBER(10,2),
  CREATED_AT            TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT            TIMESTAMP_NTZ,
  CONSTRAINT PK_ORDER_ITEMS PRIMARY KEY (ORDER_ITEM_ID),
  CONSTRAINT FK_ORDER_ITEMS_ORDER FOREIGN KEY (ORDER_ID) REFERENCES ORDERS(ORDER_ID),
  CONSTRAINT FK_ORDER_ITEMS_PRODUCT FOREIGN KEY (PRODUCT_ID) REFERENCES PRODUCTS(PRODUCT_ID)
) CLUSTER BY (ORDER_ID, PRODUCT_ID);

CREATE OR REPLACE TABLE CUSTOMER_INTERACTIONS (
  INTERACTION_ID        NUMBER IDENTITY START 1 INCREMENT 1,
  CUSTOMER_ID           NUMBER,
  INTERACTION_TS        TIMESTAMP_NTZ,
  CHANNEL               STRING, -- Web, Mobile, Support
  EVENT_TYPE            STRING, -- PageView, AddToCart, Checkout, Ticket, Rating
  EVENT_PROPERTIES      VARIANT,
  SESSION_ID            STRING,
  CAMPAIGN_ID           NUMBER,
  CONSTRAINT PK_INTERACTIONS PRIMARY KEY (INTERACTION_ID)
) CLUSTER BY (INTERACTION_TS, CUSTOMER_ID);

CREATE OR REPLACE TABLE MARKETING_CAMPAIGNS (
  CAMPAIGN_ID           NUMBER IDENTITY START 1 INCREMENT 1,
  CAMPAIGN_NAME         STRING,
  CHANNEL               STRING,
  START_DATE            DATE,
  END_DATE              DATE,
  BUDGET                NUMBER(12,2),
  TARGET_SEGMENT        STRING,
  CREATED_AT            TIMESTAMP_NTZ DEFAULT CURRENT_TIMESTAMP(),
  UPDATED_AT            TIMESTAMP_NTZ,
  CONSTRAINT PK_CAMPAIGNS PRIMARY KEY (CAMPAIGN_ID)
);

-- 3) Sample data (small but realistic)
-- Customers
INSERT INTO CUSTOMERS (CUSTOMER_EXTERNAL_KEY, FIRST_NAME, LAST_NAME, EMAIL, PHONE, GENDER, BIRTH_DATE, ADDRESS_LINE1, CITY, STATE, POSTAL_CODE, COUNTRY, SEGMENT)
VALUES
('CUST-1001','Ava','Nguyen','ava.nguyen@example.com','+1-415-555-0101','F','1990-04-15','101 Market St','San Francisco','CA','94103','USA','Consumer'),
('CUST-1002','Liam','Patel','liam.patel@example.com','+1-206-555-0133','M','1985-11-02','202 Pine St','Seattle','WA','98101','USA','SMB'),
('CUST-1003','Mia','Garcia','mia.garcia@example.com','+44-20-5555-010','F','1993-07-23','33 Oxford St','London',NULL,'W1D','UK','Consumer'),
('CUST-1004','Noah','Kim','noah.kim@example.com','+1-917-555-0177','M','1979-03-05','88 Madison Ave','New York','NY','10016','USA','Enterprise'),
('CUST-1005','Sophia','Rossi','sophia.rossi@example.com','+39-06-555-0199','F','1988-09-18','12 Via Veneto','Rome',NULL,'00187','Italy','Consumer');

-- Products
INSERT INTO PRODUCTS (SKU, PRODUCT_NAME, CATEGORY, SUBCATEGORY, BRAND, UNIT_PRICE, COST_PRICE, ACTIVE_FLAG)
VALUES
('SKU-EL-100','Wireless Headphones','Electronics','Audio','SonicWave',129.99,70.00,TRUE),
('SKU-EL-200','4K Monitor 27"','Electronics','Displays','ViewMax',329.00,220.00,TRUE),
('SKU-AP-100','Athletic T-Shirt','Apparel','Tops','FitWear',24.99,10.00,TRUE),
('SKU-HM-100','Espresso Machine','Home','Kitchen','BrewPro',249.00,150.00,TRUE),
('SKU-EL-300','Smartphone Case','Electronics','Accessories','SonicWave',19.99,5.00,TRUE);

-- Suppliers
INSERT INTO SUPPLIERS (SUPPLIER_NAME, CONTACT_NAME, CONTACT_EMAIL, CONTACT_PHONE, COUNTRY, RATING)
VALUES
('ElectroSupply Co','J. Carter','jc@electrosupply.com','+1-323-555-0111','USA',4.50),
('FashionSource Ltd','L. Chen','lchen@fashionsource.co.uk','+44-20-5555-020','UK',4.10),
('HomeMakers SpA','M. Bianchi','mbianchi@homemakers.it','+39-02-555-030','Italy',3.90);

-- Employees
INSERT INTO EMPLOYEES (FIRST_NAME, LAST_NAME, EMAIL, TITLE, DEPARTMENT, HIRE_DATE, MANAGER_ID, STATUS)
VALUES
('Emily','Johnson','emily.johnson@retailco.com','Sales Manager','Sales','2018-06-01',NULL,'Active'),
('David','Lee','david.lee@retailco.com','Support Rep','Support','2021-01-15',1,'Active'),
('Priya','Shah','priya.shah@retailco.com','Data Analyst','Analytics','2019-09-10',1,'Active');

-- Campaigns
INSERT INTO MARKETING_CAMPAIGNS (CAMPAIGN_NAME, CHANNEL, START_DATE, END_DATE, BUDGET, TARGET_SEGMENT)
VALUES
('Spring Sale','Web','2024-03-01','2024-03-31',25000,'Consumer'),
('SMB Loyalty','Email','2024-04-01','2024-06-30',40000,'SMB');

-- Orders
INSERT INTO ORDERS (ORDER_EXTERNAL_KEY, CUSTOMER_ID, ORDER_DATE, ORDER_STATUS, CHANNEL, PAYMENT_METHOD, SHIPPING_ADDRESS, SHIPPING_CITY, SHIPPING_STATE, SHIPPING_POSTAL_CODE, SHIPPING_COUNTRY, EMPLOYEE_ID)
VALUES
('ORD-20001',1,'2024-03-05 10:15:00','Delivered','Web','Card','101 Market St','San Francisco','CA','94103','USA',1),
('ORD-20002',2,'2024-03-15 14:20:00','Delivered','Mobile','PayPal','202 Pine St','Seattle','WA','98101','USA',1),
('ORD-20003',3,'2024-03-20 09:05:00','Cancelled','Web','Card','33 Oxford St','London',NULL,'W1D','UK',NULL),
('ORD-20004',4,'2024-04-02 16:45:00','Delivered','Web','Card','88 Madison Ave','New York','NY','10016','USA',1),
('ORD-20005',5,'2024-04-18 11:30:00','Delivered','Mobile','Card','12 Via Veneto','Rome',NULL,'00187','Italy',1);

-- Order Items
INSERT INTO ORDER_ITEMS (ORDER_ID, PRODUCT_ID, QUANTITY, UNIT_PRICE_AT_ORDER, DISCOUNT_AMOUNT)
VALUES
(1,1,1,129.99,0.00),
(1,3,2,24.99,5.00),
(2,2,1,329.00,20.00),
(4,4,1,249.00,0.00),
(5,1,1,119.99,10.00),
(5,5,2,19.99,0.00);

-- Customer interactions (web/mobile/support events, link to campaigns where applicable)
INSERT INTO CUSTOMER_INTERACTIONS (CUSTOMER_ID, INTERACTION_TS, CHANNEL, EVENT_TYPE, EVENT_PROPERTIES, SESSION_ID, CAMPAIGN_ID)
SELECT 1, '2024-03-01 08:00:00', 'Web', 'PageView', PARSE_JSON('{"path":"/home"}'), 'sess-1', 1 UNION ALL
SELECT 1, '2024-03-05 10:05:00', 'Web', 'AddToCart', PARSE_JSON('{"sku":"SKU-EL-100"}'), 'sess-1', 1 UNION ALL
SELECT 1, '2024-03-05 10:10:00', 'Web', 'Checkout', PARSE_JSON('{"items":2}'), 'sess-1', 1 UNION ALL
SELECT 2, '2024-03-15 13:55:00', 'Mobile', 'PageView', PARSE_JSON('{"path":"/product/EL-200"}'), 'sess-2', NULL UNION ALL
SELECT 3, '2024-03-20 08:50:00', 'Web', 'PageView', PARSE_JSON('{"path":"/sale"}'), 'sess-3', 1 UNION ALL
SELECT 4, '2024-04-02 16:00:00', 'Support', 'Ticket', PARSE_JSON('{"topic":"Shipping"}'), 'sess-4', NULL UNION ALL
SELECT 5, '2024-04-18 10:50:00', 'Mobile', 'Rating', PARSE_JSON('{"score":5}'), 'sess-5', 2;

-- 4) Basic curated layer examples
USE SCHEMA CURATED;

-- Dimension tables
CREATE OR REPLACE TABLE DIM_CUSTOMER AS
SELECT
  c.CUSTOMER_ID,
  c.CUSTOMER_EXTERNAL_KEY,
  c.FIRST_NAME,
  c.LAST_NAME,
  c.EMAIL,
  c.GENDER,
  c.BIRTH_DATE,
  c.CITY,
  c.STATE,
  c.COUNTRY,
  c.SEGMENT,
  c.CREATED_AT,
  c.UPDATED_AT
FROM RAW.CUSTOMERS c;

CREATE OR REPLACE TABLE DIM_PRODUCT AS
SELECT
  p.PRODUCT_ID,
  p.SKU,
  p.PRODUCT_NAME,
  p.CATEGORY,
  p.SUBCATEGORY,
  p.BRAND,
  p.UNIT_PRICE,
  p.COST_PRICE,
  p.ACTIVE_FLAG
FROM RAW.PRODUCTS p;

CREATE OR REPLACE TABLE DIM_DATE AS
WITH seq AS (
  SELECT DATEADD(day, ROW_NUMBER() OVER (ORDER BY 1) - 1, '2024-01-01') AS d
  FROM TABLE(GENERATOR(ROWCOUNT => 400))
)
SELECT
  d AS DATE_KEY,
  YEAR(d) AS YEAR,
  MONTH(d) AS MONTH,
  DAY(d) AS DAY,
  TO_CHAR(d,'DY') AS DOW_SHORT,
  TO_CHAR(d,'Mon') AS MONTH_SHORT
FROM seq;

-- Fact sales
CREATE OR REPLACE TABLE FACT_SALES AS
SELECT
  oi.ORDER_ITEM_ID,
  o.ORDER_ID,
  o.ORDER_DATE::DATE AS ORDER_DATE,
  o.CUSTOMER_ID,
  oi.PRODUCT_ID,
  oi.QUANTITY,
  oi.UNIT_PRICE_AT_ORDER,
  oi.DISCOUNT_AMOUNT,
  (oi.QUANTITY * oi.UNIT_PRICE_AT_ORDER - oi.DISCOUNT_AMOUNT) AS GROSS_REVENUE,
  (oi.QUANTITY * p.COST_PRICE) AS COST_OF_GOODS,
  ((oi.QUANTITY * oi.UNIT_PRICE_AT_ORDER - oi.DISCOUNT_AMOUNT) - (oi.QUANTITY * p.COST_PRICE)) AS PROFIT,
  o.CHANNEL,
  o.ORDER_STATUS
FROM RAW.ORDER_ITEMS oi
JOIN RAW.ORDERS o      ON o.ORDER_ID = oi.ORDER_ID
JOIN RAW.PRODUCTS p    ON p.PRODUCT_ID = oi.PRODUCT_ID
WHERE o.ORDER_STATUS IN ('Paid','Shipped','Delivered');

-- Customer interaction facts
CREATE OR REPLACE TABLE FACT_INTERACTIONS AS
SELECT
  i.INTERACTION_ID,
  i.CUSTOMER_ID,
  i.INTERACTION_TS::DATE AS INTERACTION_DATE,
  i.CHANNEL,
  i.EVENT_TYPE,
  i.EVENT_PROPERTIES,
  i.CAMPAIGN_ID
FROM RAW.CUSTOMER_INTERACTIONS i;

-- 5) Presentation/Mart layer examples (views for metrics)
USE SCHEMA MART;

CREATE OR REPLACE VIEW V_REVENUE_DAILY AS
SELECT
  f.ORDER_DATE AS DATE,
  SUM(f.GROSS_REVENUE) AS TOTAL_REVENUE,
  SUM(f.PROFIT) AS TOTAL_PROFIT
FROM CURATED.FACT_SALES f
GROUP BY 1
ORDER BY 1;

CREATE OR REPLACE VIEW V_REVENUE_BY_PRODUCT AS
SELECT
  p.CATEGORY,
  p.SUBCATEGORY,
  p.PRODUCT_NAME,
  SUM(f.GROSS_REVENUE) AS REVENUE,
  SUM(f.PROFIT) AS PROFIT,
  SUM(f.QUANTITY) AS UNITS
FROM CURATED.FACT_SALES f
JOIN CURATED.DIM_PRODUCT p USING (PRODUCT_ID)
GROUP BY 1,2,3
ORDER BY REVENUE DESC;

CREATE OR REPLACE VIEW V_REVENUE_BY_SEGMENT AS
SELECT
  c.SEGMENT,
  SUM(f.GROSS_REVENUE) AS REVENUE,
  SUM(f.PROFIT) AS PROFIT
FROM CURATED.FACT_SALES f
JOIN CURATED.DIM_CUSTOMER c USING (CUSTOMER_ID)
GROUP BY 1
ORDER BY REVENUE DESC;

-- Simple customer KPI examples (LTV approximation using realized profit)
CREATE OR REPLACE VIEW V_CUSTOMER_LTV AS
SELECT
  c.CUSTOMER_ID,
  c.FIRST_NAME,
  c.LAST_NAME,
  c.SEGMENT,
  SUM(f.PROFIT) AS REALIZED_LTV
FROM CURATED.FACT_SALES f
JOIN CURATED.DIM_CUSTOMER c USING (CUSTOMER_ID)
GROUP BY 1,2,3,4
ORDER BY REALIZED_LTV DESC;

-- Acquisition cost proxy by campaign (spend / distinct customers interacting)
CREATE OR REPLACE VIEW V_CAMPAIGN_CAC AS
SELECT
  mc.CAMPAIGN_ID,
  mc.CAMPAIGN_NAME,
  mc.CHANNEL,
  mc.BUDGET,
  NULLIF(COUNT(DISTINCT fi.CUSTOMER_ID),0) AS DISTINCT_CUSTOMERS,
  CASE WHEN COUNT(DISTINCT fi.CUSTOMER_ID) = 0 THEN NULL ELSE mc.BUDGET / COUNT(DISTINCT fi.CUSTOMER_ID) END AS CAC
FROM RAW.MARKETING_CAMPAIGNS mc
LEFT JOIN CURATED.FACT_INTERACTIONS fi USING (CAMPAIGN_ID)
GROUP BY 1,2,3,4;

-- Retention proxy: percent with repeat orders
CREATE OR REPLACE VIEW V_RETENTION_RATE AS
WITH orders_per_customer AS (
  SELECT CUSTOMER_ID, COUNT(DISTINCT ORDER_ID) AS orders
  FROM CURATED.FACT_SALES
  GROUP BY 1
)
SELECT
  (SUM(CASE WHEN orders >= 2 THEN 1 ELSE 0 END) / NULLIF(COUNT(*),0)) AS RETENTION_RATE
FROM orders_per_customer;

-- Churn proxy: 1 - retention
CREATE OR REPLACE VIEW V_CHURN_RATE AS
SELECT 1 - (SELECT RETENTION_RATE FROM V_RETENTION_RATE) AS CHURN_RATE;

-- Satisfaction proxy from ratings in interactions (0-5), when present
CREATE OR REPLACE VIEW V_CUSTOMER_SATISFACTION AS
SELECT
  AVG(i.EVENT_PROPERTIES:score::number)  AS AVG_RATING
FROM CURATED.FACT_INTERACTIONS i
WHERE i.EVENT_TYPE = 'Rating';

-- Order & product analytics
CREATE OR REPLACE VIEW V_ORDER_SUMMARY AS
SELECT
  ORDER_ID,
  ORDER_DATE,
  CHANNEL,
  ORDER_STATUS,
  SUM(QUANTITY) AS TOTAL_ITEMS,
  SUM(GROSS_REVENUE) AS ORDER_REVENUE,
  SUM(PROFIT) AS ORDER_PROFIT
FROM CURATED.FACT_SALES
GROUP BY 1,2,3,4;

-- Supplier performance proxy: margin contribution on products likely supplied
CREATE OR REPLACE VIEW V_SUPPLIER_PERFORMANCE AS
SELECT
  s.SUPPLIER_ID,
  s.SUPPLIER_NAME,
  s.COUNTRY,
  s.RATING,
  SUM(f.PROFIT) AS TOTAL_PROFIT
FROM RAW.SUPPLIERS s
JOIN CURATED.FACT_SALES f
  ON 1=1 -- placeholder relationship if product->supplier mapping is added later
GROUP BY 1,2,3,4;

-- 6) Helpful roles and grants (optional for competitions)
-- These can be adapted depending on your org policies
-- CREATE ROLE RETAIL_STUDENT;
-- GRANT USAGE ON WAREHOUSE WH_RETAIL_COMPETITION TO ROLE RETAIL_STUDENT;
-- GRANT USAGE ON DATABASE RETAIL_COMPETITION TO ROLE RETAIL_STUDENT;
-- GRANT USAGE ON ALL SCHEMAS IN DATABASE RETAIL_COMPETITION TO ROLE RETAIL_STUDENT;
-- GRANT SELECT ON ALL TABLES IN SCHEMA RAW TO ROLE RETAIL_STUDENT;
-- GRANT SELECT ON ALL TABLES IN SCHEMA CURATED TO ROLE RETAIL_STUDENT;
-- GRANT SELECT ON ALL VIEWS IN SCHEMA MART TO ROLE RETAIL_STUDENT;

-- End of setup
